<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>CyberCrack v1.3 - File Password Cracker</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto+Mono:wght@400;500&display=swap" rel="stylesheet"/>
  <style>
    body {
      background: linear-gradient(180deg, #0a0a23 0%, #1b1b4f 50%, #0a0a23 100%);
      font-family: 'Roboto Mono', monospace;
      color: #00e1ff;
      margin: 0;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
    }
    .terminal {
      width: 100vw;
      height: 100vh;
      background: #111;
      display: flex;
      flex-direction: column;
      border: none;
      box-shadow: none;
    }
    .terminal-header {
      background: linear-gradient(90deg, #1b1b4f, #0a0a23);
      padding: 1.5rem;
      font-family: 'Orbitron', sans-serif;
      font-size: 1.5rem;
      font-weight: 700;
      border-bottom: 2px solid #00e1ff;
      text-align: center;
      text-transform: uppercase;
      letter-spacing: 2px;
      color: #00e1ff;
    }
    .terminal-body {
      padding: 2rem;
      flex-grow: 1;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: #00e1ff #222;
    }
    .terminal-body::-webkit-scrollbar {
      width: 8px;
    }
    .terminal-body::-webkit-scrollbar-track {
      background: #222;
    }
    .terminal-body::-webkit-scrollbar-thumb {
      background: #00e1ff;
      border-radius: 4px;
    }
    input[type="file"], input[type="text"], select {
      background: #222;
      border: 1px solid #00e1ff;
      border-radius: 5px;
      padding: 0.75rem;
      color: #00e1ff;
      width: 100%;
      box-sizing: border-box;
      font-family: 'Roboto Mono', monospace;
      font-size: 1rem;
      transition: all 0.3s ease;
    }
    input[type="file"]:hover, input[type="text"]:hover, select:hover {
      background: #333;
      box-shadow: 0 0 10px rgba(0, 225, 255, 0.5);
    }
    input[type="file"]:focus, input[type="text"]:focus, select:focus {
      outline: none;
      border-color: #00ff88;
      box-shadow: 0 0 15px rgba(0, 255, 136, 0.5);
    }
    select {
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%2300e1ff' viewBox='0 0 24 24'%3E%3Cpath d='M7 10l5 5 5-5z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 0.75rem center;
      background-size: 1rem;
    }
    button {
      border-radius: 5px;
      font-family: 'Roboto Mono', monospace;
      font-weight: 500;
      padding: 0.75rem 1.5rem;
      transition: all 0.3s ease;
      border: 1px solid #00e1ff;
      cursor: pointer;
    }
    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 0 15px rgba(0, 225, 255, 0.5);
    }
    button:active {
      transform: translateY(0);
    }
    .btn-cyan {
      background: #00e1ff;
      color: #000;
    }
    .btn-cyan:hover {
      background: #00ff88;
    }
    .btn-red {
      background: #ff3333;
      color: #fff;
    }
    .btn-red:hover {
      background: #cc0000;
    }
    .btn-gray {
      background: #555;
      color: #fff;
    }
    .btn-gray:hover {
      background: #777;
    }
    #fileName, #passwordListName, #status, #timer, #result {
      padding: 0.5rem;
      border-radius: 5px;
      background: rgba(0, 225, 255, 0.1);
      margin-bottom: 1rem;
      font-size: 1rem;
    }
    #progressBar {
      height: 12px;
      background: #00e1ff;
      border-radius: 5px;
      transition: width 0.3s ease;
      box-shadow: 0 0 10px rgba(0, 225, 255, 0.5);
    }
    label {
      display: flex;
      align-items: center;
      font-size: 0.9rem;
      color: #00ff88;
      margin-bottom: 1rem;
    }
    input[type="checkbox"] {
      accent-color: #00e1ff;
      width: 1.2rem;
      height: 1.2rem;
      cursor: pointer;
    }
    .flex-container {
      display: flex;
      gap: 1rem;
      align-items: center;
      flex-wrap: wrap;
    }
    @media (max-width: 640px) {
      .terminal-header {
        font-size: 1.2rem;
        padding: 1rem;
      }
      .terminal-body {
        padding: 1rem;
      }
      button {
        padding: 0.5rem 1rem;
        font-size: 0.9rem;
      }
      input[type="file"], input[type="text"], select {
        font-size: 0.9rem;
        padding: 0.5rem;
      }
    }
  </style>
</head>
<body>
<div class="terminal">
  <div class="terminal-header">CyberCrack v1.3 - File Password Cracker</div>
  <div class="terminal-body space-y-4">
    <input type="file" id="fileInput" accept=".zip,.pdf" onchange="showFileName()" />
    <div id="fileName" class="text-cyan-300 text-sm"></div>
    <div class="flex-container">
      <select id="passwordList">
        <option value="passwords100.txt">100 Passwords</option>
        <option value="passwords1000.txt">1,000 Passwords</option>
        <option value="passwords10000.txt">10,000 Passwords</option>
        <option value="passwords100000.txt">100,000 Passwords</option>
      </select>
      <button onclick="selectPasswordList()" class="btn-cyan">Select Password List</button>
    </div>
    <div id="passwordListName" class="text-cyan-300 text-sm"></div>
    <input type="text" id="hints" placeholder="Comma separated hints" />
    <label><input type="checkbox" id="enableBruteForce" class="mr-2" />Enable brute-force (limited)</label>
    <div class="flex-container">
      <button onclick="startCracking()" class="btn-cyan">Start Cracking</button>
      <button onclick="stopCracking()" class="btn-red">Stop</button>
      <button onclick="clearCracking()" class="btn-gray">Clear</button>
    </div>
    <div id="status" class="text-yellow-400"></div>
    <div id="progressBar" style="width: 0%"></div>
    <div id="timer" class="text-green-400"></div>
    <div id="result" class="text-lime-400 font-bold text-lg"></div>
  </div>
</div>

<script>
  const charset = 'abcdefghijklmnopqrstuvwxyz0123456789';
  let stopRequested = false;
  let selectedPasswordList = 'passwords100.txt';
  let loadedPasswords = [];

  function generateHintBasedPasswords(hints) {
    const set = new Set();
    for (let hint of hints) {
      hint = hint.toLowerCase();
      const rev = hint.split('').reverse().join('');
      const cap = hint.charAt(0).toUpperCase() + hint.slice(1);
      const upper = hint.toUpperCase();
      set.add(hint);
      set.add(hint + '123');
      set.add(hint + '2024');
      set.add(hint + '@123');
      set.add('123' + hint);
      set.add('786' + hint);
      set.add(hint + '786');
      set.add(hint + '1');
      set.add(hint.slice(0, 4));
      set.add(rev);
      set.add(hint + hint);
      set.add(hint + '007');
      set.add(hint + 'pass');
      set.add(cap);
      set.add(upper);
      set.add(hint.charAt(0).toLowerCase() + hint.slice(1).toUpperCase());
      set.add(cap + '123');
      set.add(upper + '123');
      set.add(cap + hint);
      set.add(hint + '2023');
      set.add(hint + '2025');
      set.add(hint + '2022');
      set.add(hint + '000');
      set.add(hint + '999');
      set.add('2023' + hint);
      set.add('2025' + hint);
      set.add('000' + hint);
      set.add('999' + hint);
      set.add(hint + '12');
      set.add(hint + '99');
      set.add('12' + hint);
      set.add('99' + hint);
      for (let i = 0; i <= 7; i++) {
        set.add(hint + i);
      }
      const symbols = ['@', '#', '!', '$', '%', '^', '&', '*', '-', '_'];
      for (let sym of symbols) {
        set.add(hint + sym);
        set.add(sym + hint);
      }
      set.add(hint + hint + hint);
      set.add(rev + hint);
      set.add(hint + rev);
      set.add(cap + rev);
      set.add(upper + hint);
      set.add(hint + cap);
      set.add(hint + 'pwd');
      set.add('pwd' + hint);
      set.add(hint + 'admin');
      set.add('admin' + hint);
      set.add(hint + 'user');
      set.add('user' + hint);
      set.add(hint + 'cyber');
      set.add('cyber' + hint);
      set.add(hint.repeat(3));
      set.add(hint.slice(0, 3));
      set.add(hint.slice(-3));
      set.add(hint.slice(0, 5));
      set.add(hint.slice(-5));
      set.add(hint.slice(1));
      set.add(hint.slice(0, -1));
      set.add(rev.slice(0, 3));
      set.add(rev.slice(-3));
      set.add(hint.slice(1, 4));
      set.add(hint.slice(-4, -1));
      set.add(hint + '!@#');
      set.add('!@#' + hint);
      set.add(hint + '2024!');
      set.add(hint + '@2024');
      set.add(hint + '#123');
      set.add(hint + 'hack');
      set.add('hack' + hint);
      set.add(hint + 'login');
      set.add('login' + hint);
      set.add(hint.replace(/[aeio]/g, '1'));
      set.add(hint.replace(/[aeio]/g, '@'));
      set.add(hint + '!!');
      set.add(hint + '**');
      set.add(hint + '2025#');
      set.add(hint + 'cyber123');
    }
    return [...set].slice(0, 500);
  }

  function* bruteForce(charset, minLen, maxLen) {
    function* helper(prefix, len) {
      if (len === 0) yield prefix;
      else {
        for (const ch of charset) {
          yield* helper(prefix + ch, len - 1);
        }
      }
    }
    for (let len = minLen; len <= maxLen; len++) {
      yield* helper('', len);
    }
  }

  async function tryPdfPassword(data, password) {
    try {
      pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.min.js';
      await pdfjsLib.getDocument({ data, password }).promise;
      return true;
    } catch {
      return false;
    }
  }

  async function tryZipPassword(data, password) {
    try {
      const zip = new JSZip();
      await zip.loadAsync(data, { password });
      return true;
    } catch {
      return false;
    }
  }

  function stopCracking() {
    stopRequested = true;
    document.getElementById("status").textContent = "⛔ Cracking stopped by user.";
  }

  function clearCracking() {
    stopRequested = true;
    document.getElementById('fileInput').value = '';
    document.getElementById('hints').value = '';
    document.getElementById('fileName').textContent = '';
    document.getElementById('passwordList').value = 'passwords100.txt';
    document.getElementById('passwordListName').textContent = '';
    selectedPasswordList = 'passwords100.txt';
    loadedPasswords = [];
    document.getElementById('status').textContent = '';
    document.getElementById('progressBar').style.width = '0%';
    document.getElementById('timer').textContent = '';
    document.getElementById('result').textContent = '';
  }

  function showFileName() {
    const file = document.getElementById('fileInput').files[0];
   
  }

  async function selectPasswordList() {
    const passwordList = document.getElementById('passwordList').value;
    selectedPasswordList = passwordList;
    const status = document.getElementById('status');
    status.textContent = `⬇️ Downloading ${selectedPasswordList}...`;
    
    try {
      const response = await fetch(`https://asadkhan.kesug.com/Giddra/cat/${selectedPasswordList}`);
      if (!response.ok) throw new Error(`Failed to fetch ${selectedPasswordList} (Status: ${response.status})`);
      const text = await response.text();
      loadedPasswords = text.split(/[\n\r]+/).map(p => p.trim()).filter(p => p.length >= 4);
      console.log(`Downloaded ${loadedPasswords.length} passwords from ${selectedPasswordList}`);
      if (loadedPasswords.length === 0) {
        status.textContent = `⚠️ No valid passwords in ${selectedPasswordList}.`;
        document.getElementById('passwordListName').textContent = '';
        loadedPasswords = [];
      } else {
        document.getElementById('passwordListName').textContent = `📜 Selected Password List: ${selectedPasswordList} (${loadedPasswords.length} passwords)`;
        status.textContent = `✅ ${selectedPasswordList} selected successfully.`;
      }
    } catch (e) {
      console.error(`Error downloading ${selectedPasswordList}:`, e);
      status.textContent = `⚠️ Failed to download ${selectedPasswordList}: ${e.message}`;
      document.getElementById('passwordListName').textContent = '';
      loadedPasswords = [];
    }
  }

  async function startCracking() {
    stopRequested = false;
    const fileInput = document.getElementById('fileInput');
    const hintsInput = document.getElementById('hints').value;
    const enableBrute = document.getElementById('enableBruteForce').checked;
    const status = document.getElementById('status');
    const progressBar = document.getElementById('progressBar');
    const result = document.getElementById('result');
    const timerDisplay = document.getElementById('timer');
    result.textContent = '';
    status.textContent = '';
    progressBar.style.width = '0%';
    timerDisplay.textContent = '';

    if (!fileInput.files[0]) return (status.textContent = 'Please upload a ZIP or PDF file.');
    if (loadedPasswords.length === 0) return (status.textContent = 'Please select a password list.');

    const file = fileInput.files[0];
    const type = file.name.endsWith('.pdf') ? 'pdf' : file.name.endsWith('.zip') ? 'zip' : '';
    if (!type) return (status.textContent = 'Unsupported file type.');

    const buffer = await file.arrayBuffer();
    const hints = hintsInput.split(',').map(h => h.trim()).filter(h => h);
    const hintPasswords = generateHintBasedPasswords(hints);

    const startTime = performance.now();
    let attempts = 0;

    const testPasswords = async (passwords, label) => {
      status.textContent = `🔍 Trying ${label}...`;
      let passwordIndex = 0;
      const chunkSize = 100;
      while (passwordIndex < passwords.length) {
        if (stopRequested) return false;
        const chunk = passwords.slice(passwordIndex, passwordIndex + chunkSize);
        for (const pass of chunk) {
          if (stopRequested) return false;
          attempts++;
          passwordIndex++;
          const ok = type === 'pdf' ? await tryPdfPassword(buffer, pass) : await tryZipPassword(buffer, pass);
          progressBar.style.width = ((attempts / 20000) * 100).toFixed(1) + '%';
          console.log(`Tested password ${passwordIndex}/${passwords.length}: ${pass}`);
          if (ok) {
            const endTime = performance.now();
            timerDisplay.textContent = `⏱ Time: ${(endTime - startTime) / 1000} seconds`;
            result.textContent = `✅ Password found: ${pass}`;
            return true;
          }
        }
        await new Promise(resolve => setTimeout(resolve, 0));
      }
      return false;
    };

    if (hintPasswords.length > 0) {
      console.log(`Testing ${hintPasswords.length} hint-based passwords`);
      const success = await testPasswords(hintPasswords, 'hint-based passwords');
      if (success) return;
    }

    console.log(`Testing ${loadedPasswords.length} passwords from ${selectedPasswordList}`);
    const success = await testPasswords(loadedPasswords, `passwords from ${selectedPasswordList}`);
    if (success) return;

    if (enableBrute) {
      status.textContent = '🔁 Brute-forcing (length 4-8)...';
      let count = 0;
      for (const pass of bruteForce(charset, 4, 8)) {
        if (stopRequested || count >= 10000) break;
        count++;
        attempts++;
        const ok = type === 'pdf' ? await tryPdfPassword(buffer, pass) : await tryZipPassword(buffer, pass);
        progressBar.style.width = ((attempts / 20000) * 100).toFixed(1) + '%';
        console.log(`Tested brute-force password ${count}: ${pass}`);
        if (ok) {
          const endTime = performance.now();
          timerDisplay.textContent = `⏱ Time: ${(endTime - startTime) / 1000} seconds`;
          result.textContent = `✅ Password found: ${pass}`;
          return;
        }
      }
    }

    const endTime = performance.now();
    timerDisplay.textContent = `⏱ Time: ${(endTime - startTime) / 1000} seconds`;
    result.textContent = '❌ Password not found.';
  }
</script>
</body>
</html>
